- content_for :title, t('.title')
.admin
  .row
    = render 'layouts/admin/menu'
    section.content.large-12.columns
      .filters
        = form_tag admin_backers_path, method: :get, class: 'form-horizontal' do |f|
          .row
            .large-3.columns
              = label_tag :by_user_id, t('.user_id')
              = text_field_tag :by_user_id, params[:by_user_id], class: 'input-small'
            .large-3.columns
              = label_tag :between_values, t('.between_values')
              = text_field_tag 'between_values[start_at]', (params[:between_values][:start_at] if params[:between_values].present?), class: 'input-small'
              | &nbsp;
              | &nbsp;
              = text_field_tag 'between_values[ends_at]', (params[:between_values][:ends_at] if params[:between_values].present?), class: 'input-small'
            .large-3.columns
              = label_tag :with_state, t('.by_state')
              = select_tag :with_state, options_for_select(Backer.state_names, params[:with_state]), include_blank: true
            .large-3.columns
              = label_tag :by_key, t('.key')
              = text_field_tag :by_key, params[:by_key]
            .large-6.columns
              = label_tag :project_name_contains, t('.project')
              = text_field_tag :project_name_contains, params[:project_name_contains]
            .large-4.columns
              = label_tag :user_name_contains, t('.user')
              = text_field_tag :user_name_contains, params[:user_name_contains], class: 'input-medium'
            .large-4.columns
              = label_tag :user_email_contains, t('.user_email')
              = text_field_tag :user_email_contains, params[:user_email_contains], class: 'input-medium'
            .large-4.columns
              = label_tag :payer_email_contains, t('.payer_email')
              = text_field_tag :payer_email_contains, params[:payer_email_contains], class: 'input-medium'
            .large-6.columns.text-left
              = check_box_tag :credits, :true, params[:credits]
              = label_tag :credits, t('.credits')
            .large-6.columns.text-right
              = submit_tag t('.submit'), class: 'button'

      .row
        .large-6.columns.text-left
          = paginate @backers
        .large-6.columns.text-right
          = pluralize_without_number collection.count, t('words.found_singular'), t('words.found_plural')
          | &nbsp;
          strong= collection.count
          | &nbsp;
          = pluralize_without_number(collection.count, t('words.backer_singular'), t('words.backer_plural')).downcase
      - if @backers.empty?
        = t('.no_backers')
      - else
        table
          thead
            tr
              th= t('.info')
              th= t('.project')
              th= t('.user')
              th= t('.value')
              th= t('.reward')
              th= t('.key')
              th= t('.anonymous')
              th= t('.credits')
              th= t('.state')
              th
          tbody
            - @backers.includes(:project, :user, :reward).each do |backer|
              tr id=backer.id
                td
                  .reveal-modal.small.fixed id="backer-info-#{backer.id}"
                    a.close-reveal-modal Ã—
                    h5 = t('.backer_info', key: backer.key)
                    .modal-body style='text-align: left'
                      p
                        strong= t('.payment_method')
                        | &nbsp;
                        = backer.payment_method
                      p
                        strong= t('.payment_fee')
                        | &nbsp;
                        = number_to_currency backer.payment_service_fee
                      p
                        strong= t('.payment_id')
                        | &nbsp;
                        = backer.payment_id
                      p
                        strong= t('.payer_email')
                        | &nbsp;
                        = backer.payer_email
                      p
                        strong= t('.user_email')
                        | &nbsp;
                        = backer.user.email
                      p
                        strong= t('.payment_choice')
                        | &nbsp;
                        = backer.payment_choice
                      p
                        strong= t('.created_at')
                        | &nbsp;
                        = l(backer.created_at)

                  = link_to "#backer-info-#{backer.id}", class: 'button tiny secondary', data: { 'reveal-id' => "backer-info-#{backer.id}" } do
                    i.icon-et-info-circled
                td title=backer.project.name
                  = link_to project_path(backer.project) do
                    = image_tag backer.project.display_image, size: '100x100'
                td title=backer.user.display_name
                  = link_to user_path(backer.user) do
                    = backer.user.display_image_html width: 50, height: 50
                  .user_id= best_in_place [:admin, backer], :user_id, method: :put, type: :input
                td= best_in_place [:admin, backer], :value, method: :put, type: :input
                td title=("#{backer.reward.display_minimum} - #{backer.reward.description}" if backer.reward)
                  - if backer.reward
                    = backer.reward.display_minimum
                  - else
                    | -
                  | &nbsp;
                  = link_to 'javascript:void(0);', class: 'button tiny secondary', data: {dropdown: "dropdown-reward-#{backer.id}"} do
                    i.icon-et-down-dir
                  ul[id="dropdown-reward-#{backer.id}" data-dropdown-content class="f-dropdown"]
                    li title=("#{t('.no_reward')}" ) = link_to t('.no_reward'), change_reward_admin_backer_path(backer, reward_id: nil), method: :put
                    - backer.available_rewards.each do |reward|
                      li title=("#{reward.display_minimum} - #{reward.description}" ) = link_to reward.minimum_value, change_reward_admin_backer_path(backer, reward_id: reward.id, local_params: params), method: :put

                td.key= backer.key
                td.checkbox= best_in_place [:admin, backer], :anonymous, method: :put, type: :checkbox, collection: [t('words._no'), t('words._yes')]
                td= (backer.credits ? t('words._yes') : t('words._no'))
                td= backer.state
                td
                  = link_to 'javascript:void(0);', class: 'button tiny secondary', data: {dropdown: "dropdown-#{backer.id}"} do
                    i.icon-et-down-dir
                ul[id="dropdown-#{backer.id}" data-dropdown-content class="f-dropdown"]
                  - if backer.confirmed?
                    li= link_to t('admin.backers.index.unconfirm_backer'), pendent_admin_backer_path(backer, local_params: params), method: :put
                  - else
                    li= link_to t('admin.backers.index.confirm_backer'), confirm_admin_backer_path(backer, local_params: params), method: :put
                  - if backer.requested_refund? or backer.confirmed?
                    li= link_to t('admin.backers.index.refund_backer'), refund_admin_backer_path(backer, local_params: params), method: :put
                  li= link_to t('admin.backers.index.refund_and_hide'), hide_admin_backer_path(backer, local_params: params), method: :put
                  li= link_to t('admin.backers.index.cancel'), cancel_admin_backer_path(backer, local_params: params), method: :put
                  li= link_to t('admin.backers.index.push_to_trash'), push_to_trash_admin_backer_path(backer, local_params: params), method: :put
      = paginate @backers

